/*******************************************************************************
 * Copyright (c) 2006-2012
 * Software Technology Group, Dresden University of Technology
 * DevBoost GmbH, Berlin, Amtsgericht Charlottenburg, HRB 140026
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Software Technology Group - TU Dresden, Germany;
 *   DevBoost GmbH - Berlin, Germany
 *      - initial API and implementation
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.reuseware.coconut.fragment.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.reuseware.coconut.fragment.util.FragmentAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FragmentItemProviderAdapterFactory extends FragmentAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FragmentItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.APMatchGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APMatchGroupItemProvider apMatchGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.APMatchGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPMatchGroupAdapter() {
		if (apMatchGroupItemProvider == null) {
			apMatchGroupItemProvider = new APMatchGroupItemProvider(this);
		}

		return apMatchGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.APMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APMatchItemProvider apMatchItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.APMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPMatchAdapter() {
		if (apMatchItemProvider == null) {
			apMatchItemProvider = new APMatchItemProvider(this);
		}

		return apMatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.Anchor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnchorItemProvider anchorItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.Anchor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnchorAdapter() {
		if (anchorItemProvider == null) {
			anchorItemProvider = new AnchorItemProvider(this);
		}

		return anchorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.ComposedFragment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedFragmentItemProvider composedFragmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.ComposedFragment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComposedFragmentAdapter() {
		if (composedFragmentItemProvider == null) {
			composedFragmentItemProvider = new ComposedFragmentItemProvider(this);
		}

		return composedFragmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.CompositionInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionInterfaceItemProvider compositionInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.CompositionInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionInterfaceAdapter() {
		if (compositionInterfaceItemProvider == null) {
			compositionInterfaceItemProvider = new CompositionInterfaceItemProvider(this);
		}

		return compositionInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.HeterogeneousPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeterogeneousPortItemProvider heterogeneousPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.HeterogeneousPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeterogeneousPortAdapter() {
		if (heterogeneousPortItemProvider == null) {
			heterogeneousPortItemProvider = new HeterogeneousPortItemProvider(this);
		}

		return heterogeneousPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.HomogeneousPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HomogeneousPortItemProvider homogeneousPortItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.HomogeneousPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHomogeneousPortAdapter() {
		if (homogeneousPortItemProvider == null) {
			homogeneousPortItemProvider = new HomogeneousPortItemProvider(this);
		}

		return homogeneousPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.Hook} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HookItemProvider hookItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.Hook}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHookAdapter() {
		if (hookItemProvider == null) {
			hookItemProvider = new HookItemProvider(this);
		}

		return hookItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.InstantiationSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstantiationSetItemProvider instantiationSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.InstantiationSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstantiationSetAdapter() {
		if (instantiationSetItemProvider == null) {
			instantiationSetItemProvider = new InstantiationSetItemProvider(this);
		}

		return instantiationSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.PhysicalFragment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalFragmentItemProvider physicalFragmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.PhysicalFragment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalFragmentAdapter() {
		if (physicalFragmentItemProvider == null) {
			physicalFragmentItemProvider = new PhysicalFragmentItemProvider(this);
		}

		return physicalFragmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.Prototype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrototypeItemProvider prototypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.Prototype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrototypeAdapter() {
		if (prototypeItemProvider == null) {
			prototypeItemProvider = new PrototypeItemProvider(this);
		}

		return prototypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.Slot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotItemProvider slotItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.Slot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotAdapter() {
		if (slotItemProvider == null) {
			slotItemProvider = new SlotItemProvider(this);
		}

		return slotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.ValueHook} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueHookItemProvider valueHookItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.ValueHook}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueHookAdapter() {
		if (valueHookItemProvider == null) {
			valueHookItemProvider = new ValueHookItemProvider(this);
		}

		return valueHookItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.fragment.ValuePrototype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValuePrototypeItemProvider valuePrototypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.fragment.ValuePrototype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValuePrototypeAdapter() {
		if (valuePrototypeItemProvider == null) {
			valuePrototypeItemProvider = new ValuePrototypeItemProvider(this);
		}

		return valuePrototypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (apMatchGroupItemProvider != null) apMatchGroupItemProvider.dispose();
		if (apMatchItemProvider != null) apMatchItemProvider.dispose();
		if (anchorItemProvider != null) anchorItemProvider.dispose();
		if (composedFragmentItemProvider != null) composedFragmentItemProvider.dispose();
		if (compositionInterfaceItemProvider != null) compositionInterfaceItemProvider.dispose();
		if (heterogeneousPortItemProvider != null) heterogeneousPortItemProvider.dispose();
		if (homogeneousPortItemProvider != null) homogeneousPortItemProvider.dispose();
		if (hookItemProvider != null) hookItemProvider.dispose();
		if (instantiationSetItemProvider != null) instantiationSetItemProvider.dispose();
		if (physicalFragmentItemProvider != null) physicalFragmentItemProvider.dispose();
		if (prototypeItemProvider != null) prototypeItemProvider.dispose();
		if (slotItemProvider != null) slotItemProvider.dispose();
		if (valueHookItemProvider != null) valueHookItemProvider.dispose();
		if (valuePrototypeItemProvider != null) valuePrototypeItemProvider.dispose();
	}

}
