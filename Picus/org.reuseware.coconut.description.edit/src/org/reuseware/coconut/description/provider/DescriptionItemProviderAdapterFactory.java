/*******************************************************************************
 * Copyright (c) 2006-2012
 * Software Technology Group, Dresden University of Technology
 * DevBoost GmbH, Berlin, Amtsgericht Charlottenburg, HRB 140026
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Software Technology Group - TU Dresden, Germany;
 *   DevBoost GmbH - Berlin, Germany
 *      - initial API and implementation
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.reuseware.coconut.description.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.reuseware.coconut.description.util.DescriptionAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DescriptionItemProviderAdapterFactory extends DescriptionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DescriptionItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.BrowserState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrowserStateItemProvider browserStateItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.BrowserState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrowserStateAdapter() {
		if (browserStateItemProvider == null) {
			browserStateItemProvider = new BrowserStateItemProvider(this);
		}

		return browserStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.FacetDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacetDefinitionItemProvider facetDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.FacetDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacetDefinitionAdapter() {
		if (facetDefinitionItemProvider == null) {
			facetDefinitionItemProvider = new FacetDefinitionItemProvider(this);
		}

		return facetDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.DateFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateFacetItemProvider dateFacetItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.DateFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateFacetAdapter() {
		if (dateFacetItemProvider == null) {
			dateFacetItemProvider = new DateFacetItemProvider(this);
		}

		return dateFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.ListFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListFacetItemProvider listFacetItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.ListFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListFacetAdapter() {
		if (listFacetItemProvider == null) {
			listFacetItemProvider = new ListFacetItemProvider(this);
		}

		return listFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.RangeFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeFacetItemProvider rangeFacetItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.RangeFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeFacetAdapter() {
		if (rangeFacetItemProvider == null) {
			rangeFacetItemProvider = new RangeFacetItemProvider(this);
		}

		return rangeFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.TreeFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreeFacetItemProvider treeFacetItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.TreeFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreeFacetAdapter() {
		if (treeFacetItemProvider == null) {
			treeFacetItemProvider = new TreeFacetItemProvider(this);
		}

		return treeFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.Facet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacetItemProvider facetItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.Facet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacetAdapter() {
		if (facetItemProvider == null) {
			facetItemProvider = new FacetItemProvider(this);
		}

		return facetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.FacetValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacetValueItemProvider facetValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.FacetValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacetValueAdapter() {
		if (facetValueItemProvider == null) {
			facetValueItemProvider = new FacetValueItemProvider(this);
		}

		return facetValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.FragmentDescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FragmentDescriptionItemProvider fragmentDescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.FragmentDescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFragmentDescriptionAdapter() {
		if (fragmentDescriptionItemProvider == null) {
			fragmentDescriptionItemProvider = new FragmentDescriptionItemProvider(this);
		}

		return fragmentDescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.FreeTextFacet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FreeTextFacetItemProvider freeTextFacetItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.FreeTextFacet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFreeTextFacetAdapter() {
		if (freeTextFacetItemProvider == null) {
			freeTextFacetItemProvider = new FreeTextFacetItemProvider(this);
		}

		return freeTextFacetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.FacetTypeDecorator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacetTypeDecoratorItemProvider facetTypeDecoratorItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.FacetTypeDecorator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacetTypeDecoratorAdapter() {
		if (facetTypeDecoratorItemProvider == null) {
			facetTypeDecoratorItemProvider = new FacetTypeDecoratorItemProvider(this);
		}

		return facetTypeDecoratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.FacetValueDecorator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FacetValueDecoratorItemProvider facetValueDecoratorItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.FacetValueDecorator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFacetValueDecoratorAdapter() {
		if (facetValueDecoratorItemProvider == null) {
			facetValueDecoratorItemProvider = new FacetValueDecoratorItemProvider(this);
		}

		return facetValueDecoratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.DirectDerivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectDerivationItemProvider directDerivationItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.DirectDerivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectDerivationAdapter() {
		if (directDerivationItemProvider == null) {
			directDerivationItemProvider = new DirectDerivationItemProvider(this);
		}

		return directDerivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.LangIndependentDerivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LangIndependentDerivationItemProvider langIndependentDerivationItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.LangIndependentDerivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLangIndependentDerivationAdapter() {
		if (langIndependentDerivationItemProvider == null) {
			langIndependentDerivationItemProvider = new LangIndependentDerivationItemProvider(this);
		}

		return langIndependentDerivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.reuseware.coconut.description.MappingDerivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingDerivationItemProvider mappingDerivationItemProvider;

	/**
	 * This creates an adapter for a {@link org.reuseware.coconut.description.MappingDerivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingDerivationAdapter() {
		if (mappingDerivationItemProvider == null) {
			mappingDerivationItemProvider = new MappingDerivationItemProvider(this);
		}

		return mappingDerivationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (browserStateItemProvider != null) browserStateItemProvider.dispose();
		if (facetDefinitionItemProvider != null) facetDefinitionItemProvider.dispose();
		if (dateFacetItemProvider != null) dateFacetItemProvider.dispose();
		if (listFacetItemProvider != null) listFacetItemProvider.dispose();
		if (rangeFacetItemProvider != null) rangeFacetItemProvider.dispose();
		if (treeFacetItemProvider != null) treeFacetItemProvider.dispose();
		if (facetItemProvider != null) facetItemProvider.dispose();
		if (facetValueItemProvider != null) facetValueItemProvider.dispose();
		if (fragmentDescriptionItemProvider != null) fragmentDescriptionItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (freeTextFacetItemProvider != null) freeTextFacetItemProvider.dispose();
		if (facetTypeDecoratorItemProvider != null) facetTypeDecoratorItemProvider.dispose();
		if (facetValueDecoratorItemProvider != null) facetValueDecoratorItemProvider.dispose();
		if (directDerivationItemProvider != null) directDerivationItemProvider.dispose();
		if (langIndependentDerivationItemProvider != null) langIndependentDerivationItemProvider.dispose();
		if (mappingDerivationItemProvider != null) mappingDerivationItemProvider.dispose();
	}

}
