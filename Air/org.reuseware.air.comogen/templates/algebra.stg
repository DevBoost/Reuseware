group Java;

fragment(baselanguage,algebrapackage) ::= <<
/** 
 * File generated by Reusewair (do not edit!) 
 *
 */ 

package <algebrapackage>;

import org.reuseware.air.core.cm.IFragment;

public interface I<baselanguage;format="capitalize">Fragment extends IFragment {

	public void accept(<baselanguage;format="capitalize">Visitor visitor); 
}
>>

////////////////////////////////////////////////////////////////////////////////////////

visitor(baselanguage,types,algebrapackage,fragmentpackage) ::= <<
/** 
 * File generated by Reusewair (do not edit!) 
 *
 */ 

package <algebrapackage>;

import org.reuseware.air.core.cm.IFragment;
<types:visitorgenericimport()>

public class <baselanguage;format="capitalize">Visitor {

	private IFragment paramFragment = null; 
	
	public <baselanguage;format="capitalize">Visitor() {
		
	}
	
	public <baselanguage;format="capitalize">Visitor(IFragment fragment) {
	
		paramFragment = fragment; 
	}
	
	public IFragment getParamFragment() {
		
		return paramFragment; 
	}
	
	// base- and reuse-types
	<types:visitorgenericmethod(); separator="\n">

}
>>

visitorgenericimport() ::= << 
import <fragmentpackage>.I<it>;
>>

visitorgenericmethod() ::= <<
public boolean visit(I<it> node) { return true; }
>>

////////////////////////////////////////////////////////////////////////////////////

algebra(baselanguage,reuselanguage,
		baseTypes,reuseTypes,
		baselanguagepackage,reuselanguagepackage,
		algebrapackage,algebraimplpackage,
		fragmentpackage,fragmentimplpackage) ::= <<
/** 
 * File generated by Reusewair (do not edit!) 
 */ 
package <algebrapackage>;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.reuseware.air.core.cm.IFragment;
import org.reuseware.air.algebra.GenericFragment;
<baseTypes:basealgebraimport(); separator="\n"> 
<reuseTypes:reusealgebraimport(); separator="\n">

public abstract class <baselanguage;format="capitalize">Algebra extends GenericFragment{

	/**
	 * Visitor for <baselanguage;format="capitalize">.
	 * 
	 * @param visitor
	 */
	public void accept(<baselanguage;format="capitalize">Visitor visitor) {
		if (this instanceof IFragment) {
			accept<baselanguage;format="capitalize">((IFragment)this, visitor); 
		}
	}

	/**
	 * Visitor for <baselanguage;format="capitalize">
	 * 
	 * @param fragment
	 * @param visitor
	 */
	private void accept<baselanguage;format="capitalize">(IFragment fragment, <baselanguage;format="capitalize">Visitor visitor) {

		if (fragment instanceof GenericFragment) {
			GenericFragment gf = (GenericFragment)fragment; 

			// get the fragments  
			List\<EObject\> objFrgmts = gf.getFragments();

			if (objFrgmts != null) {
				for (EObject objFrgmt : objFrgmts) { 
					for (Iterator\<EObject\> i = objFrgmt.eAllContents(); i.hasNext(); ) {
						EObject obj = (EObject) i.next();

						<baseTypes:algebravisit(); separator="\n">
						<reuseTypes:algebravisit(); separator="\n">
					}
				}
			}
		}
	}
	
	<contextgetters(); separator="\n">
}
>>

basealgebraimport() ::= <<
import <fragmentpackage>.I<it>;
import <fragmentimplpackage>.I<it>Impl;
>>

reusealgebraimport() ::= <<
import <fragmentpackage>.I<it>;
import <fragmentimplpackage>.I<it>Impl;
>>


algebravisit() ::= <<
if (obj instanceof <it>) { 

	// create the I<it> object
	I<it>  node = new I<it>Impl(); 
	List\<EObject\> frgmt = new LinkedList\<EObject\>(); 
	frgmt.add(obj);
	// set fragment
	if (node instanceof GenericFragment) {
		((GenericFragment)node).setFragments(frgmt);
	}
	// call abstract visitor 
	boolean ret = visitor.visit(node); 
	if (!ret)
		break; 
}
>>

contextgetters() ::= <<
	/**
	 * Get the root fragment  
	 * 
	 * @return
	 */
	public I<baselanguage;format="capitalize">Fragment getRoot() {
		
		return getContext(GenericFragment.CONTEXT.ROOT);
	}
	
	/**
	 * Get the contained fragment 
	 * 
	 */
	public I<baselanguage;format="capitalize">Fragment getContainer() {
		
		return getContext(GenericFragment.CONTEXT.CONTAINER);
	}
	
	/**
	 * Get a context fragment 
	 * 
	 */
	@SuppressWarnings("unchecked")
	private I<baselanguage;format="capitalize">Fragment getContext(Enum\<GenericFragment.CONTEXT\> context) {
		
		if (this instanceof GenericFragment) {
			GenericFragment fragment = (GenericFragment)this;
			
			EObject contextObj = fragment.getContextObject(context); 
			
			try {
				Class rootCls = 
					Class.forName("org.reuseware.air.language.<baselanguage>.impl.I" + 
							contextObj.eClass().getName() + "Impl"); 

				Object objOfRootCls = rootCls.newInstance();
				GenericFragment.getContextInstance(contextObj, objOfRootCls);
				return (I<baselanguage;format="capitalize">Fragment)objOfRootCls; 
			
			} catch (ClassNotFoundException e) {

							System.err.println("Type '" + 
									contextObj.eClass().getName() + 
									"' is not supported by the component model (or cannot be found)!");   

				//			e.printStackTrace();

			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InstantiationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return null; 
	}
>>
