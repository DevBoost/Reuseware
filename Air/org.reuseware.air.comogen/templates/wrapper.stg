group Java;

wrapper(baselanguage,reuselanguage,
		baseTypes,reuseTypes,
		utilitypackage,
		baselanguagepackage,reuselanguagepackage,
		fragmentpackage,fragmentimplpackage) ::= <<
/** 
 * File generated by Reusewair (do not edit!) 
 *
 */ 

package <utilitypackage>;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;

import org.reuseware.air.coconut.IParameterWrapper;
import org.reuseware.air.algebra.GenericFragment;
<baseTypes:basewrapperimport(); separator="\n">
<reuseTypes:reusewrapperimport(); separator="\n">

public class ComposerWrapper implements IParameterWrapper {

	/**
	 * Wrapper for <baselanguage;format="capitalize"> parameters 
	 * 
	 */
	public List\<Object\> wrap(ArrayList\<ArrayList\<EObject\>\> parameters) {

		List\<Object\> wrappedParams = new ArrayList\<Object\>();

		for (List\<EObject\> param : parameters) {

			if (param != null) {
			
				<baseTypes:wrapperparam(); separator="\n">
				<reuseTypes:wrapperparam(); separator="\n"> 
			
				else {
					// default 
					wrappedParams.add(param); 
				}
				
			}
		}

		return wrappedParams;
	}
}
>>


basewrapperimport() ::= <<
import <baselanguagepackage>.<it>;
import <fragmentpackage>.I<it>;
import <fragmentimplpackage>.I<it>Impl;
>>

reusewrapperimport() ::= <<
import <reuselanguagepackage>.<it>;
import <fragmentpackage>.I<it>;
import <fragmentimplpackage>.I<it>Impl; 
>>


wrapperparam() ::= <<
if (param.get(0) instanceof <it>) {
					
	I<it> construct = new I<it>Impl(); 
	if (construct instanceof GenericFragment) {
		GenericFragment genConstruct = (GenericFragment)construct;
		genConstruct.setFragments(param); 
	}
	// add wrapped parameter
	wrappedParams.add(construct); 
	// continue wrapping next
	continue; 
} 
>>				

